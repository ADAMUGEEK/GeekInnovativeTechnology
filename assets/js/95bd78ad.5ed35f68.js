"use strict";(self.webpackChunkgeekink=self.webpackChunkgeekink||[]).push([[6371],{7538:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=r(5893),t=r(1151);const i={sidebar_position:3},o="project 2",a={id:"C/ass1",title:"project 2",description:"Algorithm",source:"@site/docs/C/ass1.mdx",sourceDirName:"C",slug:"/C/ass1",permalink:"/docs/C/ass1",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"project 1",permalink:"/docs/C/ass"},next:{title:"project 3",permalink:"/docs/C/ass2"}},l={},d=[{value:"Algorithm",id:"algorithm",level:2},{value:"Program Flow:",id:"program-flow",level:2}];function c(e){const n={h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"project-2",children:"project 2"}),"\n",(0,s.jsx)(n.h2,{id:"algorithm",children:"Algorithm"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 1 Prompt User for Number of Courses:\nDisplay a prompt asking the user to enter the number of courses.\nRead the user input and store it in the variable numCourses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 2 Validate Number of Courses:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Check if numCourses is less than or equal to 0."}),"\n",(0,s.jsx)(n.p,{children:"If true, display an error message and exit the program with an error code."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 3 Initialize Variables:\nInitialize totalCredits and totalGradePoints to 0.0."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 4  Loop for Each Course:\nUse a for loop to iterate from 1 to numCourses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 5 Inside the loop:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Display a prompt for course details (course number).\nRead and store user input for course credits in the variable credits.\nRead and store user input for course grade in the variable grade."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 6 Validate Grade:\nCheck if grade is outside the valid range of 0 to 4 (on a 4.0 scale).\nIf true, display an error message and exit the program with an error code."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 7 Update Total Credits and Grade Points:\nAdd credits to totalCredits.\nAdd the product of credits and grade to totalGradePoints."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 8  Calculate GPA:\nCalculate the GPA by dividing totalGradePoints by totalCredits. Store the result in the variable gpa."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 9 Display GPA:\nDisplay the calculated GPA with two decimal places."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"step 10 Exit Successfully:\nReturn 0 to indicate successful program execution."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"program-flow",children:"Program Flow:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"User Interaction:\nUser is prompted to enter the number of courses.\nUser enters the number of courses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Validation:\nThe program checks if the entered number of courses is valid (greater than 0).\nIf not, an error message is displayed, and the program exits with an error code."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Initialization:\nVariables totalCredits and totalGradePoints are initialized to 0.0."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Loop for Each Course:\nThe program enters a loop to gather information for each course."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"User Interaction for Each Course:\nUser is prompted to enter credits for the current course.\nUser enters credits for the current course.\nUser is prompted to enter the grade for the current course.\nUser enters the grade for the current course."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Grade Validation:\nThe program checks if the entered grade is within the valid range (0 to 4)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If not, an error message is displayed, and the program exits with an error code."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Update Total Credits and Grade Points:\nThe program updates the cumulative total credits and grade points for all courses."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Calculate GPA:\nThe program calculates the GPA based on the accumulated total credits and grade points."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Display GPA:\nThe program displays the calculated GPA."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Exit Successfully:\nThe program exits with a return code of 0, indicating successful execution."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This program allows a user to input information for multiple courses and calculates the GPA based on the entered data."})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>o});var s=r(7294);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);