"use strict";(self.webpackChunkgeekink=self.webpackChunkgeekink||[]).push([[10],{7569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(5893),a=t(1151);const s={sidebar_position:7},r="Functions and Creativity",i={id:"python/Day6",title:"Functions and Creativity",description:"explore modular programming concepts in Python with some code examples.",source:"@site/docs/python/Day6.mdx",sourceDirName:"python",slug:"/python/Day6",permalink:"/docs/python/Day6",draft:!1,unlisted:!1,editUrl:"https://github.com/AdamsGeeky/docs/python/Day6.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Functions and Creativity (Day 5)",permalink:"/docs/python/Day5"},next:{title:"The Journey Forward",permalink:"/docs/python/forward"}},u={},c=[];function l(e){const n={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"functions-and-creativity",children:"Functions and Creativity"}),"\n",(0,o.jsx)(n.p,{children:"explore modular programming concepts in Python with some code examples."}),"\n",(0,o.jsx)(n.h1,{id:"module-design",children:"Module Design:"}),"\n",(0,o.jsx)(n.p,{children:"Suppose you're working on a simple project that involves handling user authentication and generating secure tokens. You can break down this project into two modules: one for authentication and one for token generation."}),"\n",(0,o.jsx)(n.p,{children:"auth_module.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def authenticate(username, password):\n    # Authentication logic\n    if username == "user" and password == "pass":\n        return True\n    return False\n'})}),"\n",(0,o.jsx)(n.p,{children:"token_module.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import random\nimport string\n\ndef generate_token(length=16):\n    characters = string.ascii_letters + string.digits\n    token = ''.join(random.choice(characters) for _ in range(length))\n    return token\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Dependency Management:"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Let's say the token generation module depends on the authentication module. Here's how you can use the auth_module in the token_module:"}),"\n",(0,o.jsx)(n.p,{children:"token_module.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import auth_module\n\ndef generate_token_if_authenticated(username, password, length=16):\n    if auth_module.authenticate(username, password):\n        token = generate_token(length)\n        return token\n    else:\n        return None\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Encapsulation:"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Ensure that your modules encapsulate their internal details. Only expose what's necessary. For instance, users of the auth_module should only interact with the authenticate function:"}),"\n",(0,o.jsx)(n.p,{children:"auth_module.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def authenticate(username, password):\n    # Authentication logic\n    if username == "user" and password == "pass":\n        return True\n    return False\n'})}),"\n",(0,o.jsx)(n.h1,{id:"internal-function-not-exposed-to-users",children:"Internal function not exposed to users"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def _internal_helper():\n    pass\n4. Code Organization:\n\nOrganize your project structure to reflect the modular design:\n\n```css\nproject/\n\u2502\n\u251c\u2500\u2500 auth_module.py\n\u251c\u2500\u2500 token_module.py\n\u2514\u2500\u2500 main.py\n"})}),"\n",(0,o.jsx)(n.p,{children:"main.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import auth_module\nimport token_module\n\ndef main():\n    username = input("Username: ")\n    password = input("Password: ")\n\n    if auth_module.authenticate(username, password):\n        token = token_module.generate_token()\n        print(f"Token: {token}")\n    else:\n        print("Authentication failed.")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsx)(n.li,{children:"Testing and Validation:"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Write unit tests to ensure each module functions correctly. Here's a basic example using Python's built-in unittest framework:"}),"\n",(0,o.jsx)(n.p,{children:"test_auth_module.py:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'\nimport unittest\nimport auth_module\n\nclass TestAuthModule(unittest.TestCase):\n    def test_authentication_success(self):\n        self.assertTrue(auth_module.authenticate("user", "pass"))\n\n    def test_authentication_failure(self):\n        self.assertFalse(auth_module.authenticate("user", "wrongpass"))\n\nif __name__ == "__main__":\n    unittest.main()\nThese examples demonstrate how you can apply modular programming concepts in Python. By breaking down your project into modular components with clear interfaces and encapsulation, you make your codebase more manageable, scalable, and collaborative.\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>r});var o=t(7294);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);